function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)



m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    if(iter > 97)
        break;
    end
    predict =X * theta - y;
    temp1 = theta(1,1) - (alpha * sum(predict .* X(:, 1))) / m;
    temp2 = theta(2,1) - (alpha * sum(predict .* X(:, 2))) / m;
    theta(1, 1) = temp1;
    theta(2, 1) = temp2;  
    J_history(iter) = computeCost(X, y, theta);

end
